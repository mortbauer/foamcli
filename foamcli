#!/usr/bin/env python

import os
import re
import click
import shutil
import subprocess
import multiprocessing

DIR = os.path.dirname(os.path.abspath(__file__))
TIME_TEMPLATE = '{0:.2}'

PROCESSOR_PATTERN = re.compile('^processor[0-9]+$')
TIME_PATTERN = re.compile('^[0-9]\.[0-9]+$|^[0-9]\.[0-9]+e[+-][0-9]+$|^[0-9]*$')
LOG_PATTERN = re.compile('^log\.[a-zA-Z]*$')

@click.group()
def run():
    pass

@run.group(chain=True)
def clean():
    pass

@clean.command(name='all')
@click.pass_context
def clean_all(ctx):
    if click.confirm('Do you really want to clean all case Data?'):
        ctx.invoke(clean_time_steps)
        ctx.invoke(clean_parallel_times)
        ctx.invoke(clean_logs)

@clean.command('time-steps')
def clean_time_steps():
    for x in os.listdir(DIR):
        match = TIME_PATTERN.match(x)
        if match and not float(x) == 0.0:
            shutil.rmtree(os.path.join(DIR,x))

@clean.command('processors')
def clean_processors():
    if click.confirm('Do you really want to clean the processors data?'):
        for x in os.listdir(DIR):
            match = PROCESSOR_PATTERN.match(x)
            if match:
                shutil.rmtree(os.path.join(DIR,x))

@clean.command('parallel')
@click.option('--keep-last/--nokeep-latest',default=True)
@click.option('--keep')
@click.option('--del-each',default=1)
@click.option('--n',default=4)
def clean_parallel_times(keep_last=True,n=4,keep=None,del_each=1):
    time_dirs = {}
    for x in os.listdir(DIR):
        match = PROCESSOR_PATTERN.match(x)
        if match:
            if not x in time_dirs:
                time_dirs[x] = []
            for t in os.listdir(os.path.join(DIR,x)):
                tmatch = TIME_PATTERN.match(t)
                if tmatch:
                    time_dirs[x].append(t)

    # now delete all but the last time if not specified otherwise
    p = multiprocessing.Pool(n)
    rm_dirs = []
    if keep is not None:
        KEEP = re.compile(keep)
    for x in time_dirs:
        # sort the times
        time_dirs[x].sort(key=float)
        if keep_last:
            time_dirs[x].pop()
        for t in time_dirs[x][::del_each]:
            if (keep is None) or (not KEEP.match(t)):
                rm_dirs.append(os.path.join(x,t))

    p.map(shutil.rmtree,rm_dirs)

@clean.command('logs')
def clean_logs():
    for x in os.listdir(DIR):
        match = LOG_PATTERN.match(x)
        if match:
            os.remove(os.path.join(DIR,x))

@clean.command('post')
def clean_postprocessing():
    for x in ('postProcessing','turboPerformance'):
        try:
            shutil.rmtree(os.path.join(DIR,x))
        except OSError as e:
            if e.errno == os.errno.ENOENT:
                print('ignore: {0}'.format(os.path.join(DIR,x)))

@clean.command('cuttingPlane')
@click.option('--keep-last/--nokeep-latest',default=True)
@click.option('--keep')
@click.option('--del-each',default=1)
@click.option('--n',default=4)
def clean_cutting_plane(keep=None,keep_last=True,del_each=1,n=4):
    path = 'postProcessing/cuttingPlane'
    time_dirs = os.listdir(path)
    p = multiprocessing.Pool(n)
    rm_dirs = []
    if keep is not None:
        KEEP = re.compile(keep)
    # sort the times
    time_dirs.sort(key=float)
    if keep_last:
        time_dirs.pop()
    for t in time_dirs[::del_each]:
        if (keep is None) or (not KEEP.match(t)):
            rm_dirs.append(os.path.join(path,t))

    p.map(shutil.rmtree,rm_dirs)

def collect_time_dirs_in_paralell(path,parallel=False):
    time_dirs = {}
    if parallel:
        for x in os.listdir(path):
            match = PROCESSOR_PATTERN.match(x)
            if match:
                if not x in time_dirs:
                    time_dirs[x] = []
                for t in os.listdir(os.path.join(path,x)):
                    tmatch = TIME_PATTERN.match(t)
                    if tmatch:
                        time_dirs[x].append(float(t))
    else:
        time_dirs['./'] = []
        for t in os.listdir(path):
            tmatch = TIME_PATTERN.match(t)
            if tmatch:
                time_dirs['./'].append(float(t))
    return time_dirs

@run.group()
def prepare():
    pass

@prepare.command()
@click.option('--time',default='')
@click.option('--parallel/--no-parallel',default=False)
@click.argument('fro')
@click.argument('to')
@click.option('--only-constant',default=False)
def copy(fro,to,parallel=False,time='',only_constant=False):
    time_dirs = collect_time_dirs_in_paralell(fro,parallel=parallel)
    if parallel:
        constant_dirs = []
        for x in os.listdir(fro):
            if PROCESSOR_PATTERN.match(x):
                constant_dirs.append(os.path.join(x,'constant'))
    else:
        constant_dirs = ['constant']
    if time:
        timename = TIME_TEMPLATE.format(float(time))
    if not only_constant:
        for x in time_dirs:
            time_dirs[x].sort()
            if not time:
                timename = TIME_TEMPLATE.format(time_dirs[x][-1])
            if os.path.exists(os.path.join(to,x,timename)):
                shutil.rmtree(os.path.join(to,x,timename))
            shutil.copytree(
                os.path.join(fro,x,timename),
                os.path.join(to,x,timename))
    for x in constant_dirs:
        if os.path.exists(os.path.join(to,x)):
            shutil.rmtree(os.path.join(to,x))
        shutil.copytree(
            os.path.join(fro,x),
            os.path.join(to,x))

@prepare.command('boundary')
@click.option('--n',default=4)
def change_boundary_condition(n):
    subprocess.call(
        ['mpirun','-n',str(n),'changeDictionary','-parallel','-dict',
         'system/changeDictionaryDict_relative_velocity'])

@prepare.command('tocomp')
@click.option('--parallel/--no-parallel',default=False)
@click.option('--time',default='')
def convert_to_compressible(parallel=False,time=''):
    if time:
        timeargs = ['-time',time]
    else:
        timeargs = ['-latestTime']
    if parallel:
        n = 0
        for x in os.listdir(DIR):
            if PROCESSOR_PATTERN.match(x):
                n +=1
    if not parallel:
        subprocess.call(
            ['convertPhi','-rhoRef','300']+timeargs)
        subprocess.call(
            ['changeDictionary','-dict',
            'system/changeDictionaryDict_initial_pressure']+timeargs)
    else:
        subprocess.call(
            ['mpirun','-n',str(n),'convertPhi','-parallel','-rhoRef','300']+timeargs)
        subprocess.call(
            ['mpirun','-n',str(n),'changeDictionary','-parallel','-dict',
            'system/changeDictionaryDict_initial_pressure']+timeargs)

if __name__ == '__main__':
    run()
